{"id":"../node_modules/mapbox/lib/encode_overlay.js","dependencies":[{"name":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\package.json","includedInParent":true,"mtime":1710894159098},{"name":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\package.json","includedInParent":true,"mtime":1710894049971},{"name":"../vendor/invariant","loc":{"line":3,"column":24,"index":39},"parent":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\lib\\encode_overlay.js","resolved":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\vendor\\invariant.js"},{"name":"./invariant_location","loc":{"line":4,"column":30,"index":93},"parent":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\lib\\encode_overlay.js","resolved":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\lib\\invariant_location.js"},{"name":"../vendor/polyline","loc":{"line":5,"column":21,"index":139},"parent":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\lib\\encode_overlay.js","resolved":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\vendor\\polyline.js"}],"generated":{"js":"'use strict';\n\nvar invariant = require('../vendor/invariant'),\n  invariantLocation = require('./invariant_location'),\n  polyline = require('../vendor/polyline');\n\n/**\n * Given a list of markers, encode them for display\n * @param {Array<Object>} markers a list of markers\n * @returns {string} encoded markers\n * @private\n */\nfunction encodeMarkers(markers) {\n  return markers.map(function(marker) {\n    invariantLocation(marker);\n    var size = marker.size || 'l';\n    var symbol = marker.symbol || 'circle';\n    return 'pin-' + size + '-' + symbol + '(' +\n      marker.longitude + ',' + marker.latitude + ')';\n  }).join(',');\n}\n\nmodule.exports.encodeMarkers = encodeMarkers;\n\n/**\n * Given a path and style, encode it for display\n * @param {Object} path an object of a path and style\n * @param {Object} path.geojson a GeoJSON LineString\n * @param {Object} [path.style={}] style parameters\n * @returns {string} encoded path as polyline\n * @private\n */\nfunction encodePath(path) {\n  invariant(path.geojson.type === 'LineString', 'path line must be a LineString');\n  var encoded = polyline.fromGeoJSON(path.geojson);\n\n  var style = '';\n  if (path.style) {\n    if (path.style.strokewidth !== undefined) style += '-' + path.style.strokewidth;\n    if (path.style.strokecolor !== undefined) style += '+' + path.style.strokecolor;\n  }\n  return 'path' + style + '(' + encoded + ')';\n}\n\nmodule.exports.encodePath = encodePath;\n\n/**\n * Given a GeoJSON object, encode it for a static map.\n * @param {Object} geojson a geojson object\n * @returns {string} encoded geojson as string\n * @private\n */\nfunction encodeGeoJSON(geojson) {\n  var encoded = JSON.stringify(geojson);\n  invariant(encoded.length < 4096, 'encoded GeoJSON must be shorter than 4096 characters long');\n  return 'geojson(' + encoded + ')';\n}\n\nmodule.exports.encodeGeoJSON = encodeGeoJSON;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/mapbox/lib/encode_overlay.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}}],"sources":{"../node_modules/mapbox/lib/encode_overlay.js":"'use strict';\n\nvar invariant = require('../vendor/invariant'),\n  invariantLocation = require('./invariant_location'),\n  polyline = require('../vendor/polyline');\n\n/**\n * Given a list of markers, encode them for display\n * @param {Array<Object>} markers a list of markers\n * @returns {string} encoded markers\n * @private\n */\nfunction encodeMarkers(markers) {\n  return markers.map(function(marker) {\n    invariantLocation(marker);\n    var size = marker.size || 'l';\n    var symbol = marker.symbol || 'circle';\n    return 'pin-' + size + '-' + symbol + '(' +\n      marker.longitude + ',' + marker.latitude + ')';\n  }).join(',');\n}\n\nmodule.exports.encodeMarkers = encodeMarkers;\n\n/**\n * Given a path and style, encode it for display\n * @param {Object} path an object of a path and style\n * @param {Object} path.geojson a GeoJSON LineString\n * @param {Object} [path.style={}] style parameters\n * @returns {string} encoded path as polyline\n * @private\n */\nfunction encodePath(path) {\n  invariant(path.geojson.type === 'LineString', 'path line must be a LineString');\n  var encoded = polyline.fromGeoJSON(path.geojson);\n\n  var style = '';\n  if (path.style) {\n    if (path.style.strokewidth !== undefined) style += '-' + path.style.strokewidth;\n    if (path.style.strokecolor !== undefined) style += '+' + path.style.strokecolor;\n  }\n  return 'path' + style + '(' + encoded + ')';\n}\n\nmodule.exports.encodePath = encodePath;\n\n/**\n * Given a GeoJSON object, encode it for a static map.\n * @param {Object} geojson a geojson object\n * @returns {string} encoded geojson as string\n * @private\n */\nfunction encodeGeoJSON(geojson) {\n  var encoded = JSON.stringify(geojson);\n  invariant(encoded.length < 4096, 'encoded GeoJSON must be shorter than 4096 characters long');\n  return 'geojson(' + encoded + ')';\n}\n\nmodule.exports.encodeGeoJSON = encodeGeoJSON;\n"},"lineCount":60}},"error":null,"hash":"dc3f8349e77e471900bea73fc71fb5ce","cacheData":{"env":{}}}