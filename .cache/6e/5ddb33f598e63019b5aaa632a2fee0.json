{"id":"../node_modules/mapbox/lib/services/surface.js","dependencies":[{"name":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\package.json","includedInParent":true,"mtime":1710894159098},{"name":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\package.json","includedInParent":true,"mtime":1710894049971},{"name":"../../vendor/invariant","loc":{"line":3,"column":24,"index":39},"parent":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\lib\\services\\surface.js","resolved":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\vendor\\invariant.js"},{"name":"../format_points","loc":{"line":4,"column":27,"index":93},"parent":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\lib\\services\\surface.js","resolved":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\lib\\format_points.js"},{"name":"../make_service","loc":{"line":5,"column":26,"index":140},"parent":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\lib\\services\\surface.js","resolved":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\lib\\make_service.js"}],"generated":{"js":"'use strict';\n\nvar invariant = require('../../vendor/invariant');\nvar formatPoints = require('../format_points');\nvar makeService = require('../make_service');\n\n/**\n * @class MapboxSurface\n */\nvar MapboxSurface = makeService('MapboxSurface');\n\nvar API_SURFACE = '/v4/surface/{mapid}.json{?access_token,layer,fields,points,geojson,interpolate,encoded_polyline}';\n\n/**\n * Given a list of locations, retrieve vector tiles, find the nearest\n * spatial features, extract their data values, and then absolute values and\n * optionally interpolated values in-between, if the interpolate option is specified.\n *\n * Consult the [Surface API](https://www.mapbox.com/developers/api/surface/)\n * for more documentation.\n *\n * @param {string} mapid a Mapbox mapid containing vector tiles against\n * which we'll query\n * @param {string} layer layer within the given `mapid` for which to pull\n * data\n * @param {Array<string>} fields layer within the given `mapid` for which to pull\n * data\n * @param {Array<Object>|string} path either an encoded polyline,\n * provided as a string, or an array of objects with longitude and latitude\n * properties, similar to waypoints.\n * @param {Object} [options={}] additional options meant to tune\n * the request\n * @param {string} [options.geojson=false] whether to return data as a\n * GeoJSON point\n * @param {string} [options.zoom=maximum] zoom level at which features\n * are queried\n * @param {boolean} [options.interpolate=true] Whether to interpolate\n * between matches in the feature collection.\n * @param {Function} callback called with (err, results)\n * @returns {Promise} response\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n */\nMapboxSurface.prototype.surface = function(mapid, layer, fields, path, options, callback) {\n\n  // permit the options argument to be omitted\n  if (callback === undefined && typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  // typecheck arguments\n  invariant(typeof mapid === 'string', 'mapid must be a string');\n  invariant(typeof layer === 'string', 'layer must be a string');\n  invariant(Array.isArray(fields), 'fields must be an array of strings');\n  invariant(Array.isArray(path) || typeof path === 'string', 'path must be an array of objects or a string');\n  invariant(typeof options === 'object', 'options must be an object');\n\n  var interpolate = true,\n    geojson = false;\n\n  if (options.interpolate !== undefined) {\n    invariant(typeof options.interpolate === 'boolean', 'interpolate must be a boolean');\n    interpolate = options.interpolate;\n  }\n\n  if (options.geojson !== undefined) {\n    invariant(typeof options.geojson === 'boolean', 'geojson option must be boolean');\n    geojson = options.geojson;\n  }\n\n  var surfaceOptions = {\n    geojson: geojson,\n    layer: layer,\n    mapid: mapid,\n    fields: fields.join(','),\n    interpolate: interpolate\n  };\n\n  if (Array.isArray(path)) {\n    surfaceOptions.points = formatPoints(path);\n  } else {\n    surfaceOptions.encoded_polyline = path;\n  }\n\n  if (options.zoom !== undefined) {\n    invariant(typeof options.zoom === 'number', 'zoom must be a number');\n    surfaceOptions.z = options.zoom;\n  }\n\n  return this.client({\n    path: API_SURFACE,\n    params: surfaceOptions,\n    callback: callback\n  });\n};\n\nmodule.exports = MapboxSurface;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/mapbox/lib/services/surface.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}}],"sources":{"../node_modules/mapbox/lib/services/surface.js":"'use strict';\n\nvar invariant = require('../../vendor/invariant');\nvar formatPoints = require('../format_points');\nvar makeService = require('../make_service');\n\n/**\n * @class MapboxSurface\n */\nvar MapboxSurface = makeService('MapboxSurface');\n\nvar API_SURFACE = '/v4/surface/{mapid}.json{?access_token,layer,fields,points,geojson,interpolate,encoded_polyline}';\n\n/**\n * Given a list of locations, retrieve vector tiles, find the nearest\n * spatial features, extract their data values, and then absolute values and\n * optionally interpolated values in-between, if the interpolate option is specified.\n *\n * Consult the [Surface API](https://www.mapbox.com/developers/api/surface/)\n * for more documentation.\n *\n * @param {string} mapid a Mapbox mapid containing vector tiles against\n * which we'll query\n * @param {string} layer layer within the given `mapid` for which to pull\n * data\n * @param {Array<string>} fields layer within the given `mapid` for which to pull\n * data\n * @param {Array<Object>|string} path either an encoded polyline,\n * provided as a string, or an array of objects with longitude and latitude\n * properties, similar to waypoints.\n * @param {Object} [options={}] additional options meant to tune\n * the request\n * @param {string} [options.geojson=false] whether to return data as a\n * GeoJSON point\n * @param {string} [options.zoom=maximum] zoom level at which features\n * are queried\n * @param {boolean} [options.interpolate=true] Whether to interpolate\n * between matches in the feature collection.\n * @param {Function} callback called with (err, results)\n * @returns {Promise} response\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n */\nMapboxSurface.prototype.surface = function(mapid, layer, fields, path, options, callback) {\n\n  // permit the options argument to be omitted\n  if (callback === undefined && typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  // typecheck arguments\n  invariant(typeof mapid === 'string', 'mapid must be a string');\n  invariant(typeof layer === 'string', 'layer must be a string');\n  invariant(Array.isArray(fields), 'fields must be an array of strings');\n  invariant(Array.isArray(path) || typeof path === 'string', 'path must be an array of objects or a string');\n  invariant(typeof options === 'object', 'options must be an object');\n\n  var interpolate = true,\n    geojson = false;\n\n  if (options.interpolate !== undefined) {\n    invariant(typeof options.interpolate === 'boolean', 'interpolate must be a boolean');\n    interpolate = options.interpolate;\n  }\n\n  if (options.geojson !== undefined) {\n    invariant(typeof options.geojson === 'boolean', 'geojson option must be boolean');\n    geojson = options.geojson;\n  }\n\n  var surfaceOptions = {\n    geojson: geojson,\n    layer: layer,\n    mapid: mapid,\n    fields: fields.join(','),\n    interpolate: interpolate\n  };\n\n  if (Array.isArray(path)) {\n    surfaceOptions.points = formatPoints(path);\n  } else {\n    surfaceOptions.encoded_polyline = path;\n  }\n\n  if (options.zoom !== undefined) {\n    invariant(typeof options.zoom === 'number', 'zoom must be a number');\n    surfaceOptions.z = options.zoom;\n  }\n\n  return this.client({\n    path: API_SURFACE,\n    params: surfaceOptions,\n    callback: callback\n  });\n};\n\nmodule.exports = MapboxSurface;\n"},"lineCount":99}},"error":null,"hash":"3e6c90e27ce72135fd3658d98c0a0c20","cacheData":{"env":{}}}