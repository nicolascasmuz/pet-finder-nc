{"id":"../node_modules/mapbox/lib/services/geocoding.js","dependencies":[{"name":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\package.json","includedInParent":true,"mtime":1710894159098},{"name":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\package.json","includedInParent":true,"mtime":1710894049971},{"name":"../../vendor/invariant","loc":{"line":3,"column":24,"index":39},"parent":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\lib\\services\\geocoding.js","resolved":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\vendor\\invariant.js"},{"name":"../make_service","loc":{"line":4,"column":26,"index":92},"parent":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\lib\\services\\geocoding.js","resolved":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\lib\\make_service.js"}],"generated":{"js":"'use strict';\n\nvar invariant = require('../../vendor/invariant');\nvar makeService = require('../make_service');\n\n/**\n * @class MapboxGeocoding\n */\nvar MapboxGeocoding = makeService('MapboxGeocoding');\n\nvar API_GEOCODING_FORWARD = '/geocoding/v5/{dataset}/{query}.json{?access_token,proximity,country,types,bbox,limit,autocomplete,language}';\nvar API_GEOCODING_REVERSE = '/geocoding/v5/{dataset}/{longitude},{latitude}.json{?access_token,types,limit,language}';\n\nvar REVERSE_GEOCODING_PRECISION = 5;\nvar FORWARD_GEOCODING_PROXIMITY_PRECISION = 3;\n\nfunction roundTo(value, places) {\n  var mult = Math.pow(10, places);\n  return Math.round(value * mult) / mult;\n}\n\n/**\n * Search for a location with a string, using the\n * [Mapbox Geocoding API](https://www.mapbox.com/api-documentation/#geocoding).\n *\n * The `query` parmeter can be an array of strings only if batch geocoding\n * is used by specifying `mapbox.places-permanent` as the `dataset` option.\n *\n * @param {string|Array<string>} query desired location\n * @param {Object} [options={}] additional options meant to tune\n * the request\n * @param {Object} options.proximity a proximity argument: this is\n * a geographical point given as an object with latitude and longitude\n * properties. Search results closer to this point will be given\n * higher priority.\n * @param {Array} options.bbox a bounding box argument: this is\n * a bounding box given as an array in the format [minX, minY, maxX, maxY].\n * Search results will be limited to the bounding box.\n * @param {Array<string>|string} options.language Specify the language to use for response text and, for forward geocoding, query result weighting. Options are IETF language tags comprised of a mandatory ISO 639-1 language code and optionally one or more IETF subtags for country or script. More than one value can also be specified, as an array or separated by commas.\n * @param {Array<string>|string} options.types an array or comma seperated list of types that filter\n * results to match those specified. See https://www.mapbox.com/developers/api/geocoding/#filter-type\n * for available types.\n * @param {number} [options.limit=5] is the maximum number of results to return, between 1 and 10 inclusive.\n * Some very specific queries may return fewer results than the limit.\n * @param {Array<string>|string} options.country an array or comma separated list of country codes to\n * limit results to specified country or countries.\n * @param {boolean} [options.autocomplete=true] whether to include results that include\n * the query only as a prefix. This is useful for UIs where users type\n * values, but if you have complete addresses as input, you'll want to turn it off\n * @param {string} [options.dataset=mapbox.places] the desired data to be\n * geocoded against. The default, mapbox.places, does not permit unlimited\n * caching. `mapbox.places-permanent` is available on request and does\n * permit permanent caching.\n * @param {Function} callback called with (err, results)\n * @returns {Promise} response\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n * mapboxClient.geocodeForward('Paris, France', function(err, res) {\n *   // res is a GeoJSON document with geocoding matches\n * });\n * // using the proximity option to weight results closer to texas\n * mapboxClient.geocodeForward('Paris, France', {\n *   proximity: { latitude: 33.6875431, longitude: -95.4431142 }\n * }, function(err, res) {\n *   // res is a GeoJSON document with geocoding matches\n * });\n * // using the bbox option to limit results to a portion of Washington, D.C.\n * mapboxClient.geocodeForward('Starbucks', {\n *   bbox: [-77.083056,38.908611,-76.997778,38.959167]\n * }, function(err, res) {\n *   // res is a GeoJSON document with geocoding matches\n * });\n */\nMapboxGeocoding.prototype.geocodeForward = function(query, options, callback) {\n  // permit the options argument to be omitted, or the options + callback args to be omitted if using promise syntax\n  if (callback === undefined && (options === undefined || typeof options === 'function')) {\n    callback = options;\n    options = {};\n  }\n\n  // typecheck arguments\n  if (Array.isArray(query)) {\n    if (options.dataset !== 'mapbox.places-permanent') {\n      throw new Error('Batch geocoding is only available with the mapbox.places-permanent endpoint. See https://mapbox.com/api-documentation/#batch-requests for details');\n    } else {\n      query = query.join(';');\n    }\n  }\n  invariant(typeof query === 'string', 'query must be a string');\n  invariant(typeof options === 'object', 'options must be an object');\n\n  var queryOptions = {\n    query: query,\n    dataset: 'mapbox.places'\n  };\n\n  var precision = FORWARD_GEOCODING_PROXIMITY_PRECISION;\n  if (options.precision) {\n    invariant(typeof options.precision === 'number', 'precision option must be number');\n    precision = options.precision;\n  }\n\n  if (options.proximity) {\n    invariant(typeof options.proximity.latitude === 'number' &&\n      typeof options.proximity.longitude === 'number',\n      'proximity must be an object with numeric latitude & longitude properties');\n    queryOptions.proximity = roundTo(options.proximity.longitude, precision) + ',' + roundTo(options.proximity.latitude, precision);\n  }\n\n  if (options.bbox) {\n    invariant(typeof options.bbox[0] === 'number' &&\n      typeof options.bbox[1] === 'number' &&\n      typeof options.bbox[2] === 'number' &&\n      typeof options.bbox[3] === 'number' &&\n      options.bbox.length === 4,\n      'bbox must be an array with numeric values in the form [minX, minY, maxX, maxY]');\n    queryOptions.bbox = options.bbox[0] + ',' + options.bbox[1] + ',' + options.bbox[2] + ',' + options.bbox[3];\n  }\n\n  if (options.limit) {\n    invariant(typeof options.limit === 'number',\n      'limit must be a number');\n    queryOptions.limit = options.limit;\n  }\n\n  if (options.dataset) {\n    invariant(typeof options.dataset === 'string', 'dataset option must be string');\n    queryOptions.dataset = options.dataset;\n  }\n\n  if (options.country) {\n    if (Array.isArray(options.country)) {\n      queryOptions.country = options.country.join(',');\n    } else {\n      invariant(typeof options.country === 'string', 'country option must be an array or string');\n      queryOptions.country = options.country;\n    }\n  }\n\n  if (options.language) {\n    if (Array.isArray(options.language)) {\n      queryOptions.language = options.language.join(',');\n    } else {\n      invariant(typeof options.language === 'string', 'language option must be an array or string');\n      queryOptions.language = options.language;\n    }\n  }\n\n  if (options.types) {\n    if (Array.isArray(options.types)) {\n      queryOptions.types = options.types.join(',');\n    } else {\n      invariant(typeof options.types === 'string', 'types option must be an array or string');\n      queryOptions.types = options.types;\n    }\n  }\n\n  if (typeof options.autocomplete === 'boolean') {\n    invariant(typeof options.autocomplete === 'boolean', 'autocomplete must be a boolean');\n    queryOptions.autocomplete = options.autocomplete;\n  }\n\n  return this.client({\n    path: API_GEOCODING_FORWARD,\n    params: queryOptions,\n    callback: callback\n  });\n};\n\n/**\n * Given a location, determine what geographical features are located\n * there. This uses the [Mapbox Geocoding API](https://www.mapbox.com/api-documentation/#geocoding).\n *\n * @param {Object} location the geographical point to search\n * @param {number} location.latitude decimal degrees latitude, in range -90 to 90\n * @param {number} location.longitude decimal degrees longitude, in range -180 to 180\n * @param {Object} [options={}] additional options meant to tune\n * the request.\n * @param {Array<string>|string} options.language Specify the language to use for response text and, for forward geocoding, query result weighting. Options are IETF language tags comprised of a mandatory ISO 639-1 language code and optionally one or more IETF subtags for country or script. More than one value can also be specified, separated by commas or as an array.\n * @param {Array<string>|string} options.types an array or comma seperated list of types that filter\n * results to match those specified. See\n * https://www.mapbox.com/api-documentation/#retrieve-places-near-a-location\n * for available types.\n * @param {number} [options.limit=1] is the maximum number of results to return, between 1 and 5\n * inclusive. Requires a single options.types to be specified (see example).\n * @param {string} [options.dataset=mapbox.places] the desired data to be\n * geocoded against. The default, mapbox.places, does not permit unlimited\n * caching. `mapbox.places-permanent` is available on request and does\n * permit permanent caching.\n * @param {Function} callback called with (err, results)\n * @returns {Promise} response\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n * mapboxClient.geocodeReverse(\n *   { latitude: 33.6875431, longitude: -95.4431142 },\n *   function(err, res) {\n *   // res is a GeoJSON document with geocoding matches\n * });\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n * mapboxClient.geocodeReverse(\n *   { latitude: 33.6875431, longitude: -95.4431142, options: { types: 'address', limit: 3 } },\n *   function(err, res) {\n *   // res is a GeoJSON document with up to 3 geocoding matches\n * });\n */\nMapboxGeocoding.prototype.geocodeReverse = function(location, options, callback) {\n  // permit the options argument to be omitted, or the options + callback args to be omitted if using promise syntax\n  if (callback === undefined && (options === undefined || typeof options === 'function')) {\n    callback = options;\n    options = {};\n  }\n\n  // typecheck arguments\n  invariant((typeof location === 'object' && location !== null), 'location must be an object');\n  invariant(typeof options === 'object', 'options must be an object');\n\n  invariant(typeof location.latitude === 'number' &&\n    typeof location.longitude === 'number',\n    'location must be an object with numeric latitude & longitude properties');\n\n  var queryOptions = {\n    dataset: 'mapbox.places'\n  };\n\n  if (options.dataset) {\n    invariant(typeof options.dataset === 'string', 'dataset option must be string');\n    queryOptions.dataset = options.dataset;\n  }\n\n  var precision = REVERSE_GEOCODING_PRECISION;\n  if (options.precision) {\n    invariant(typeof options.precision === 'number', 'precision option must be number');\n    precision = options.precision;\n  }\n\n  if (options.language) {\n    if (Array.isArray(options.language)) {\n      queryOptions.language = options.language.join(',');\n    } else {\n      invariant(typeof options.language === 'string', 'language option must be an array or string');\n      queryOptions.language = options.language;\n    }\n  }\n\n  if (options.types) {\n    if (Array.isArray(options.types)) {\n      queryOptions.types = options.types.join(',');\n    } else {\n      invariant(typeof options.types === 'string', 'types option must be an array or string');\n      queryOptions.types = options.types;\n    }\n  }\n\n  if (options.limit) {\n    invariant(typeof options.limit === 'number', 'limit option must be a number');\n    invariant(options.types.split(',').length === 1, 'a single type must be specified to use the limit option');\n    queryOptions.limit = options.limit;\n  }\n\n  queryOptions.longitude = roundTo(location.longitude, precision);\n  queryOptions.latitude = roundTo(location.latitude, precision);\n\n  return this.client({\n    path: API_GEOCODING_REVERSE,\n    params: queryOptions,\n    callback: callback\n  });\n};\n\nmodule.exports = MapboxGeocoding;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/mapbox/lib/services/geocoding.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}}],"sources":{"../node_modules/mapbox/lib/services/geocoding.js":"'use strict';\n\nvar invariant = require('../../vendor/invariant');\nvar makeService = require('../make_service');\n\n/**\n * @class MapboxGeocoding\n */\nvar MapboxGeocoding = makeService('MapboxGeocoding');\n\nvar API_GEOCODING_FORWARD = '/geocoding/v5/{dataset}/{query}.json{?access_token,proximity,country,types,bbox,limit,autocomplete,language}';\nvar API_GEOCODING_REVERSE = '/geocoding/v5/{dataset}/{longitude},{latitude}.json{?access_token,types,limit,language}';\n\nvar REVERSE_GEOCODING_PRECISION = 5;\nvar FORWARD_GEOCODING_PROXIMITY_PRECISION = 3;\n\nfunction roundTo(value, places) {\n  var mult = Math.pow(10, places);\n  return Math.round(value * mult) / mult;\n}\n\n/**\n * Search for a location with a string, using the\n * [Mapbox Geocoding API](https://www.mapbox.com/api-documentation/#geocoding).\n *\n * The `query` parmeter can be an array of strings only if batch geocoding\n * is used by specifying `mapbox.places-permanent` as the `dataset` option.\n *\n * @param {string|Array<string>} query desired location\n * @param {Object} [options={}] additional options meant to tune\n * the request\n * @param {Object} options.proximity a proximity argument: this is\n * a geographical point given as an object with latitude and longitude\n * properties. Search results closer to this point will be given\n * higher priority.\n * @param {Array} options.bbox a bounding box argument: this is\n * a bounding box given as an array in the format [minX, minY, maxX, maxY].\n * Search results will be limited to the bounding box.\n * @param {Array<string>|string} options.language Specify the language to use for response text and, for forward geocoding, query result weighting. Options are IETF language tags comprised of a mandatory ISO 639-1 language code and optionally one or more IETF subtags for country or script. More than one value can also be specified, as an array or separated by commas.\n * @param {Array<string>|string} options.types an array or comma seperated list of types that filter\n * results to match those specified. See https://www.mapbox.com/developers/api/geocoding/#filter-type\n * for available types.\n * @param {number} [options.limit=5] is the maximum number of results to return, between 1 and 10 inclusive.\n * Some very specific queries may return fewer results than the limit.\n * @param {Array<string>|string} options.country an array or comma separated list of country codes to\n * limit results to specified country or countries.\n * @param {boolean} [options.autocomplete=true] whether to include results that include\n * the query only as a prefix. This is useful for UIs where users type\n * values, but if you have complete addresses as input, you'll want to turn it off\n * @param {string} [options.dataset=mapbox.places] the desired data to be\n * geocoded against. The default, mapbox.places, does not permit unlimited\n * caching. `mapbox.places-permanent` is available on request and does\n * permit permanent caching.\n * @param {Function} callback called with (err, results)\n * @returns {Promise} response\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n * mapboxClient.geocodeForward('Paris, France', function(err, res) {\n *   // res is a GeoJSON document with geocoding matches\n * });\n * // using the proximity option to weight results closer to texas\n * mapboxClient.geocodeForward('Paris, France', {\n *   proximity: { latitude: 33.6875431, longitude: -95.4431142 }\n * }, function(err, res) {\n *   // res is a GeoJSON document with geocoding matches\n * });\n * // using the bbox option to limit results to a portion of Washington, D.C.\n * mapboxClient.geocodeForward('Starbucks', {\n *   bbox: [-77.083056,38.908611,-76.997778,38.959167]\n * }, function(err, res) {\n *   // res is a GeoJSON document with geocoding matches\n * });\n */\nMapboxGeocoding.prototype.geocodeForward = function(query, options, callback) {\n  // permit the options argument to be omitted, or the options + callback args to be omitted if using promise syntax\n  if (callback === undefined && (options === undefined || typeof options === 'function')) {\n    callback = options;\n    options = {};\n  }\n\n  // typecheck arguments\n  if (Array.isArray(query)) {\n    if (options.dataset !== 'mapbox.places-permanent') {\n      throw new Error('Batch geocoding is only available with the mapbox.places-permanent endpoint. See https://mapbox.com/api-documentation/#batch-requests for details');\n    } else {\n      query = query.join(';');\n    }\n  }\n  invariant(typeof query === 'string', 'query must be a string');\n  invariant(typeof options === 'object', 'options must be an object');\n\n  var queryOptions = {\n    query: query,\n    dataset: 'mapbox.places'\n  };\n\n  var precision = FORWARD_GEOCODING_PROXIMITY_PRECISION;\n  if (options.precision) {\n    invariant(typeof options.precision === 'number', 'precision option must be number');\n    precision = options.precision;\n  }\n\n  if (options.proximity) {\n    invariant(typeof options.proximity.latitude === 'number' &&\n      typeof options.proximity.longitude === 'number',\n      'proximity must be an object with numeric latitude & longitude properties');\n    queryOptions.proximity = roundTo(options.proximity.longitude, precision) + ',' + roundTo(options.proximity.latitude, precision);\n  }\n\n  if (options.bbox) {\n    invariant(typeof options.bbox[0] === 'number' &&\n      typeof options.bbox[1] === 'number' &&\n      typeof options.bbox[2] === 'number' &&\n      typeof options.bbox[3] === 'number' &&\n      options.bbox.length === 4,\n      'bbox must be an array with numeric values in the form [minX, minY, maxX, maxY]');\n    queryOptions.bbox = options.bbox[0] + ',' + options.bbox[1] + ',' + options.bbox[2] + ',' + options.bbox[3];\n  }\n\n  if (options.limit) {\n    invariant(typeof options.limit === 'number',\n      'limit must be a number');\n    queryOptions.limit = options.limit;\n  }\n\n  if (options.dataset) {\n    invariant(typeof options.dataset === 'string', 'dataset option must be string');\n    queryOptions.dataset = options.dataset;\n  }\n\n  if (options.country) {\n    if (Array.isArray(options.country)) {\n      queryOptions.country = options.country.join(',');\n    } else {\n      invariant(typeof options.country === 'string', 'country option must be an array or string');\n      queryOptions.country = options.country;\n    }\n  }\n\n  if (options.language) {\n    if (Array.isArray(options.language)) {\n      queryOptions.language = options.language.join(',');\n    } else {\n      invariant(typeof options.language === 'string', 'language option must be an array or string');\n      queryOptions.language = options.language;\n    }\n  }\n\n  if (options.types) {\n    if (Array.isArray(options.types)) {\n      queryOptions.types = options.types.join(',');\n    } else {\n      invariant(typeof options.types === 'string', 'types option must be an array or string');\n      queryOptions.types = options.types;\n    }\n  }\n\n  if (typeof options.autocomplete === 'boolean') {\n    invariant(typeof options.autocomplete === 'boolean', 'autocomplete must be a boolean');\n    queryOptions.autocomplete = options.autocomplete;\n  }\n\n  return this.client({\n    path: API_GEOCODING_FORWARD,\n    params: queryOptions,\n    callback: callback\n  });\n};\n\n/**\n * Given a location, determine what geographical features are located\n * there. This uses the [Mapbox Geocoding API](https://www.mapbox.com/api-documentation/#geocoding).\n *\n * @param {Object} location the geographical point to search\n * @param {number} location.latitude decimal degrees latitude, in range -90 to 90\n * @param {number} location.longitude decimal degrees longitude, in range -180 to 180\n * @param {Object} [options={}] additional options meant to tune\n * the request.\n * @param {Array<string>|string} options.language Specify the language to use for response text and, for forward geocoding, query result weighting. Options are IETF language tags comprised of a mandatory ISO 639-1 language code and optionally one or more IETF subtags for country or script. More than one value can also be specified, separated by commas or as an array.\n * @param {Array<string>|string} options.types an array or comma seperated list of types that filter\n * results to match those specified. See\n * https://www.mapbox.com/api-documentation/#retrieve-places-near-a-location\n * for available types.\n * @param {number} [options.limit=1] is the maximum number of results to return, between 1 and 5\n * inclusive. Requires a single options.types to be specified (see example).\n * @param {string} [options.dataset=mapbox.places] the desired data to be\n * geocoded against. The default, mapbox.places, does not permit unlimited\n * caching. `mapbox.places-permanent` is available on request and does\n * permit permanent caching.\n * @param {Function} callback called with (err, results)\n * @returns {Promise} response\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n * mapboxClient.geocodeReverse(\n *   { latitude: 33.6875431, longitude: -95.4431142 },\n *   function(err, res) {\n *   // res is a GeoJSON document with geocoding matches\n * });\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n * mapboxClient.geocodeReverse(\n *   { latitude: 33.6875431, longitude: -95.4431142, options: { types: 'address', limit: 3 } },\n *   function(err, res) {\n *   // res is a GeoJSON document with up to 3 geocoding matches\n * });\n */\nMapboxGeocoding.prototype.geocodeReverse = function(location, options, callback) {\n  // permit the options argument to be omitted, or the options + callback args to be omitted if using promise syntax\n  if (callback === undefined && (options === undefined || typeof options === 'function')) {\n    callback = options;\n    options = {};\n  }\n\n  // typecheck arguments\n  invariant((typeof location === 'object' && location !== null), 'location must be an object');\n  invariant(typeof options === 'object', 'options must be an object');\n\n  invariant(typeof location.latitude === 'number' &&\n    typeof location.longitude === 'number',\n    'location must be an object with numeric latitude & longitude properties');\n\n  var queryOptions = {\n    dataset: 'mapbox.places'\n  };\n\n  if (options.dataset) {\n    invariant(typeof options.dataset === 'string', 'dataset option must be string');\n    queryOptions.dataset = options.dataset;\n  }\n\n  var precision = REVERSE_GEOCODING_PRECISION;\n  if (options.precision) {\n    invariant(typeof options.precision === 'number', 'precision option must be number');\n    precision = options.precision;\n  }\n\n  if (options.language) {\n    if (Array.isArray(options.language)) {\n      queryOptions.language = options.language.join(',');\n    } else {\n      invariant(typeof options.language === 'string', 'language option must be an array or string');\n      queryOptions.language = options.language;\n    }\n  }\n\n  if (options.types) {\n    if (Array.isArray(options.types)) {\n      queryOptions.types = options.types.join(',');\n    } else {\n      invariant(typeof options.types === 'string', 'types option must be an array or string');\n      queryOptions.types = options.types;\n    }\n  }\n\n  if (options.limit) {\n    invariant(typeof options.limit === 'number', 'limit option must be a number');\n    invariant(options.types.split(',').length === 1, 'a single type must be specified to use the limit option');\n    queryOptions.limit = options.limit;\n  }\n\n  queryOptions.longitude = roundTo(location.longitude, precision);\n  queryOptions.latitude = roundTo(location.latitude, precision);\n\n  return this.client({\n    path: API_GEOCODING_REVERSE,\n    params: queryOptions,\n    callback: callback\n  });\n};\n\nmodule.exports = MapboxGeocoding;\n"},"lineCount":272}},"error":null,"hash":"798c76b7da8d44b4b05ae2992c9dbbd8","cacheData":{"env":{}}}