{"id":"../node_modules/mapbox/vendor/polyline.js","dependencies":[{"name":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\package.json","includedInParent":true,"mtime":1710894159098},{"name":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\package.json","includedInParent":true,"mtime":1710894049971}],"generated":{"js":"'use strict';\n\n/*\n * polyline\n *\n * https://github.com/mapbox/polyline\n *\n * by John Firebaugh, Tom MacWright, and contributors\n * licensed under BSD 3-clause\n */\n\n/*\n * Based off of [the offical Google document](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)\n *\n * Some parts from [this implementation](http://facstaff.unca.edu/mcmcclur/GoogleMaps/EncodePolyline/PolylineEncoder.js)\n * by [Mark McClure](http://facstaff.unca.edu/mcmcclur/)\n *\n * @module polyline\n */\n\nvar polyline = {};\n\nfunction encode(coordinate, factor) {\n    coordinate = Math.round(coordinate * factor);\n    coordinate <<= 1;\n    if (coordinate < 0) {\n        coordinate = ~coordinate;\n    }\n    var output = '';\n    while (coordinate >= 0x20) {\n        output += String.fromCharCode((0x20 | (coordinate & 0x1f)) + 63);\n        coordinate >>= 5;\n    }\n    output += String.fromCharCode(coordinate + 63);\n    return output;\n}\n\n/**\n * Encodes the given [latitude, longitude] coordinates array.\n *\n * @param {Array.<Array.<Number>>} coordinates\n * @param {Number} precision\n * @returns {String}\n */\npolyline.encode = function(coordinates, precision) {\n    if (!coordinates.length) { return ''; }\n\n    var factor = Math.pow(10, precision || 5),\n        output = encode(coordinates[0][0], factor) + encode(coordinates[0][1], factor);\n\n    for (var i = 1; i < coordinates.length; i++) {\n        var a = coordinates[i], b = coordinates[i - 1];\n        output += encode(a[0] - b[0], factor);\n        output += encode(a[1] - b[1], factor);\n    }\n\n    return output;\n};\n\nfunction flipped(coords) {\n    var flipped = [];\n    for (var i = 0; i < coords.length; i++) {\n        flipped.push(coords[i].slice().reverse());\n    }\n    return flipped;\n}\n\n/**\n * Encodes a GeoJSON LineString feature/geometry.\n *\n * @param {Object} geojson\n * @param {Number} precision\n * @returns {String}\n */\npolyline.fromGeoJSON = function(geojson, precision) {\n    if (geojson && geojson.type === 'Feature') {\n        geojson = geojson.geometry;\n    }\n    if (!geojson || geojson.type !== 'LineString') {\n        throw new Error('Input must be a GeoJSON LineString');\n    }\n    return polyline.encode(flipped(geojson.coordinates), precision);\n};\n\nmodule.exports = polyline;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/mapbox/vendor/polyline.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}}],"sources":{"../node_modules/mapbox/vendor/polyline.js":"'use strict';\n\n/*\n * polyline\n *\n * https://github.com/mapbox/polyline\n *\n * by John Firebaugh, Tom MacWright, and contributors\n * licensed under BSD 3-clause\n */\n\n/*\n * Based off of [the offical Google document](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)\n *\n * Some parts from [this implementation](http://facstaff.unca.edu/mcmcclur/GoogleMaps/EncodePolyline/PolylineEncoder.js)\n * by [Mark McClure](http://facstaff.unca.edu/mcmcclur/)\n *\n * @module polyline\n */\n\nvar polyline = {};\n\nfunction encode(coordinate, factor) {\n    coordinate = Math.round(coordinate * factor);\n    coordinate <<= 1;\n    if (coordinate < 0) {\n        coordinate = ~coordinate;\n    }\n    var output = '';\n    while (coordinate >= 0x20) {\n        output += String.fromCharCode((0x20 | (coordinate & 0x1f)) + 63);\n        coordinate >>= 5;\n    }\n    output += String.fromCharCode(coordinate + 63);\n    return output;\n}\n\n/**\n * Encodes the given [latitude, longitude] coordinates array.\n *\n * @param {Array.<Array.<Number>>} coordinates\n * @param {Number} precision\n * @returns {String}\n */\npolyline.encode = function(coordinates, precision) {\n    if (!coordinates.length) { return ''; }\n\n    var factor = Math.pow(10, precision || 5),\n        output = encode(coordinates[0][0], factor) + encode(coordinates[0][1], factor);\n\n    for (var i = 1; i < coordinates.length; i++) {\n        var a = coordinates[i], b = coordinates[i - 1];\n        output += encode(a[0] - b[0], factor);\n        output += encode(a[1] - b[1], factor);\n    }\n\n    return output;\n};\n\nfunction flipped(coords) {\n    var flipped = [];\n    for (var i = 0; i < coords.length; i++) {\n        flipped.push(coords[i].slice().reverse());\n    }\n    return flipped;\n}\n\n/**\n * Encodes a GeoJSON LineString feature/geometry.\n *\n * @param {Object} geojson\n * @param {Number} precision\n * @returns {String}\n */\npolyline.fromGeoJSON = function(geojson, precision) {\n    if (geojson && geojson.type === 'Feature') {\n        geojson = geojson.geometry;\n    }\n    if (!geojson || geojson.type !== 'LineString') {\n        throw new Error('Input must be a GeoJSON LineString');\n    }\n    return polyline.encode(flipped(geojson.coordinates), precision);\n};\n\nmodule.exports = polyline;\n"},"lineCount":86}},"error":null,"hash":"f84c323395872f7464103387cd49992b","cacheData":{"env":{}}}