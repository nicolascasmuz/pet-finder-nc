{"id":"../node_modules/mapbox/lib/invariant_location.js","dependencies":[{"name":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\package.json","includedInParent":true,"mtime":1710894159098},{"name":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\package.json","includedInParent":true,"mtime":1710894049971},{"name":"../vendor/invariant","loc":{"line":3,"column":24,"index":39},"parent":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\lib\\invariant_location.js","resolved":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\vendor\\invariant.js"}],"generated":{"js":"'use strict';\n\nvar invariant = require('../vendor/invariant');\n\n/**\n * Given an object that should be a location, ensure that it has\n * valid numeric longitude & latitude properties\n *\n * @param {Object} location object with longitude and latitude values\n * @throws {AssertError} if the object is not a valid location\n * @returns {undefined} nothing\n * @private\n */\nfunction invariantLocation(location) {\n  invariant(typeof location.latitude === 'number' &&\n    typeof location.longitude === 'number',\n    'location must be an object with numeric latitude & longitude properties');\n  if (location.zoom !== undefined) {\n    invariant(typeof location.zoom === 'number', 'zoom must be numeric');\n  }\n}\n\nmodule.exports = invariantLocation;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/mapbox/lib/invariant_location.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/mapbox/lib/invariant_location.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/mapbox/lib/invariant_location.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/mapbox/lib/invariant_location.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/mapbox/lib/invariant_location.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/mapbox/lib/invariant_location.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/mapbox/lib/invariant_location.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/mapbox/lib/invariant_location.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/mapbox/lib/invariant_location.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/mapbox/lib/invariant_location.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/mapbox/lib/invariant_location.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/mapbox/lib/invariant_location.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/mapbox/lib/invariant_location.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/mapbox/lib/invariant_location.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/mapbox/lib/invariant_location.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/mapbox/lib/invariant_location.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/mapbox/lib/invariant_location.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/mapbox/lib/invariant_location.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/mapbox/lib/invariant_location.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/mapbox/lib/invariant_location.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/mapbox/lib/invariant_location.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/mapbox/lib/invariant_location.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/mapbox/lib/invariant_location.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/mapbox/lib/invariant_location.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}}],"sources":{"../node_modules/mapbox/lib/invariant_location.js":"'use strict';\n\nvar invariant = require('../vendor/invariant');\n\n/**\n * Given an object that should be a location, ensure that it has\n * valid numeric longitude & latitude properties\n *\n * @param {Object} location object with longitude and latitude values\n * @throws {AssertError} if the object is not a valid location\n * @returns {undefined} nothing\n * @private\n */\nfunction invariantLocation(location) {\n  invariant(typeof location.latitude === 'number' &&\n    typeof location.longitude === 'number',\n    'location must be an object with numeric latitude & longitude properties');\n  if (location.zoom !== undefined) {\n    invariant(typeof location.zoom === 'number', 'zoom must be numeric');\n  }\n}\n\nmodule.exports = invariantLocation;\n"},"lineCount":24}},"error":null,"hash":"ad84ccf0eaa6df81b30ee2a9ff64acbb","cacheData":{"env":{}}}