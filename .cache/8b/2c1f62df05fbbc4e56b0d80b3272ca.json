{"id":"../node_modules/mapbox/lib/get_user.js","dependencies":[{"name":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\package.json","includedInParent":true,"mtime":1710894159098},{"name":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\package.json","includedInParent":true,"mtime":1710894049971},{"name":"rest/util/base64","loc":{"line":3,"column":18,"index":33},"parent":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\lib\\get_user.js","resolved":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\rest\\util\\base64.js"}],"generated":{"js":"'use strict';\n\nvar b64 = require('rest/util/base64');\n\n/**\n * Access tokens actually are data, and using them we can derive\n * a user's username. This method attempts to do just that,\n * decoding the part of the token after the first `.` into\n * a username.\n *\n * @private\n * @param {string} token an access token\n * @return {string} username\n */\nfunction getUser(token) {\n  var data = token.split('.')[1];\n  if (!data) return null;\n  data = data.replace(/-/g, '+').replace(/_/g, '/');\n\n  var mod = data.length % 4;\n  if (mod === 2) data += '==';\n  if (mod === 3) data += '=';\n  if (mod === 1 || mod > 3) return null;\n\n  try {\n    return JSON.parse(b64.decode(data)).u;\n  } catch(err) {\n    return null;\n  }\n}\n\nmodule.exports = getUser;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/mapbox/lib/get_user.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}}],"sources":{"../node_modules/mapbox/lib/get_user.js":"'use strict';\n\nvar b64 = require('rest/util/base64');\n\n/**\n * Access tokens actually are data, and using them we can derive\n * a user's username. This method attempts to do just that,\n * decoding the part of the token after the first `.` into\n * a username.\n *\n * @private\n * @param {string} token an access token\n * @return {string} username\n */\nfunction getUser(token) {\n  var data = token.split('.')[1];\n  if (!data) return null;\n  data = data.replace(/-/g, '+').replace(/_/g, '/');\n\n  var mod = data.length % 4;\n  if (mod === 2) data += '==';\n  if (mod === 3) data += '=';\n  if (mod === 1 || mod > 3) return null;\n\n  try {\n    return JSON.parse(b64.decode(data)).u;\n  } catch(err) {\n    return null;\n  }\n}\n\nmodule.exports = getUser;\n"},"lineCount":33}},"error":null,"hash":"604ead7ffb4fa7bd9f462a3f4127682e","cacheData":{"env":{}}}