{"id":"../node_modules/rest/util/lazyPromise.js","dependencies":[{"name":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\package.json","includedInParent":true,"mtime":1710894159098},{"name":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\rest\\package.json","includedInParent":true,"mtime":1710894049954},{"name":"./attempt","loc":{"line":10,"column":22,"index":172},"parent":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\rest\\util\\lazyPromise.js","resolved":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\rest\\util\\attempt.js"}],"generated":{"js":"/*\n * Copyright 2013-2016 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n'use strict';\n\nvar attempt = require('./attempt');\n\n/**\n * Create a promise whose work is started only when a handler is registered.\n *\n * The work function will be invoked at most once. Thrown values will result\n * in promise rejection.\n *\n * @param {Function} work function whose ouput is used to resolve the\n *   returned promise.\n * @returns {Promise} a lazy promise\n */\nfunction lazyPromise(work) {\n\tvar started, resolver, promise, then;\n\n\tstarted = false;\n\n\tpromise = new Promise(function (resolve, reject) {\n\t\tresolver = {\n\t\t\tresolve: resolve,\n\t\t\treject: reject\n\t\t};\n\t});\n\tthen = promise.then;\n\n\tpromise.then = function () {\n\t\tif (!started) {\n\t\t\tstarted = true;\n\t\t\tattempt(work).then(resolver.resolve, resolver.reject);\n\t\t}\n\t\treturn then.apply(promise, arguments);\n\t};\n\n\treturn promise;\n}\n\nmodule.exports = lazyPromise;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/rest/util/lazyPromise.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}}],"sources":{"../node_modules/rest/util/lazyPromise.js":"/*\n * Copyright 2013-2016 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n'use strict';\n\nvar attempt = require('./attempt');\n\n/**\n * Create a promise whose work is started only when a handler is registered.\n *\n * The work function will be invoked at most once. Thrown values will result\n * in promise rejection.\n *\n * @param {Function} work function whose ouput is used to resolve the\n *   returned promise.\n * @returns {Promise} a lazy promise\n */\nfunction lazyPromise(work) {\n\tvar started, resolver, promise, then;\n\n\tstarted = false;\n\n\tpromise = new Promise(function (resolve, reject) {\n\t\tresolver = {\n\t\t\tresolve: resolve,\n\t\t\treject: reject\n\t\t};\n\t});\n\tthen = promise.then;\n\n\tpromise.then = function () {\n\t\tif (!started) {\n\t\t\tstarted = true;\n\t\t\tattempt(work).then(resolver.resolve, resolver.reject);\n\t\t}\n\t\treturn then.apply(promise, arguments);\n\t};\n\n\treturn promise;\n}\n\nmodule.exports = lazyPromise;\n"},"lineCount":47}},"error":null,"hash":"54d789c177d711baa9cff3dcf29b88e2","cacheData":{"env":{}}}