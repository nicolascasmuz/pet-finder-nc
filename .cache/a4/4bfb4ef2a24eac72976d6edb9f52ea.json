{"id":"../node_modules/mapbox/lib/format_points.js","dependencies":[{"name":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\package.json","includedInParent":true,"mtime":1710894159098},{"name":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\package.json","includedInParent":true,"mtime":1710894049971},{"name":"./invariant_location","loc":{"line":3,"column":32,"index":47},"parent":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\lib\\format_points.js","resolved":"C:\\Users\\nicol\\apx-dwf\\dwf-m7\\pet-finder-nicolascasmuz\\node_modules\\mapbox\\lib\\invariant_location.js"}],"generated":{"js":"'use strict';\n\nvar invariantLocation = require('./invariant_location');\n\n/**\n * Format waypionts in a way that's friendly to the directions and surface\n * API: comma-separated latitude, longitude pairs with semicolons between\n * them.\n * @private\n * @param {Array<Object>} waypoints array of objects with latitude and longitude\n * properties\n * @returns {string} formatted points\n * @throws {Error} if the input is invalid\n */\nfunction formatPoints(waypoints) {\n  return waypoints.map(function(location) {\n    invariantLocation(location);\n    return location.longitude + ',' + location.latitude;\n  }).join(';');\n}\n\nmodule.exports = formatPoints;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/mapbox/lib/format_points.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/mapbox/lib/format_points.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/mapbox/lib/format_points.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/mapbox/lib/format_points.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/mapbox/lib/format_points.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/mapbox/lib/format_points.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/mapbox/lib/format_points.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/mapbox/lib/format_points.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/mapbox/lib/format_points.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/mapbox/lib/format_points.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/mapbox/lib/format_points.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/mapbox/lib/format_points.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/mapbox/lib/format_points.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/mapbox/lib/format_points.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/mapbox/lib/format_points.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/mapbox/lib/format_points.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/mapbox/lib/format_points.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/mapbox/lib/format_points.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/mapbox/lib/format_points.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/mapbox/lib/format_points.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/mapbox/lib/format_points.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/mapbox/lib/format_points.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/mapbox/lib/format_points.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}}],"sources":{"../node_modules/mapbox/lib/format_points.js":"'use strict';\n\nvar invariantLocation = require('./invariant_location');\n\n/**\n * Format waypionts in a way that's friendly to the directions and surface\n * API: comma-separated latitude, longitude pairs with semicolons between\n * them.\n * @private\n * @param {Array<Object>} waypoints array of objects with latitude and longitude\n * properties\n * @returns {string} formatted points\n * @throws {Error} if the input is invalid\n */\nfunction formatPoints(waypoints) {\n  return waypoints.map(function(location) {\n    invariantLocation(location);\n    return location.longitude + ',' + location.latitude;\n  }).join(';');\n}\n\nmodule.exports = formatPoints;\n"},"lineCount":23}},"error":null,"hash":"ee411f55aced9d582b44582de3299b1b","cacheData":{"env":{}}}